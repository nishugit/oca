const fs = require('fs');
const tmp = require('tmp');
const path = require('path');
const assert = require('assert');
const Oca = require('../../../../src');

const FileOperation = Oca.Bundle.Actions.FileOperation;


describe('File Checksum Action:', () => {


  const fooDir = tmp.dirSync().name;
  const someFile = 'someFile.foo';

  before(() => {
    fs.writeFileSync(path.join(fooDir, someFile), Array(1 * 1024 * 1024).join('0'));
  });

  after(() => {
    fs.unlinkSync(path.join(fooDir, someFile));
  });

  it('Checking the hash generated by the action', (done) => {

    (async () => {

      const checksumAction = new FileOperation.Checksum();
      checksumAction.input('file').value = path.join(fooDir, someFile);

      const result = await checksumAction.execute();
      assert.equal('4aef39e4090b33644513ab820b07ddfa7db4f8c9a3b201e2d789433d6d20becc', result);

      return result;

    })().then((result) => {
      done();
    }).catch((err) => {
      done(err);
    });
  });

  it('Should return the hash based on a custom algo', (done) => {

    (async () => {

      const checksumAction = new FileOperation.Checksum();
      checksumAction.input('algo').value = 'sha1';
      checksumAction.input('file').value = path.join(fooDir, someFile);

      const result = await checksumAction.execute();
      assert.equal('6147d53026a83e59234ff853bb2b558b208b423f', result);

      return result;

    })().then((result) => {
      done();
    }).catch((err) => {
      done(err);
    });
  });

  it('Should fail in trying to get a hash from a non existing file', (done) => {

    (async () => {

      const checksumAction = new FileOperation.Checksum();
      checksumAction.input('file').assignProperty('exists', false);
      checksumAction.input('file').value = path.join(fooDir, 'invalidFile.none');

      await checksumAction.execute();

    })().then((result) => {
      done(new Error('Unexpected result'));
    }).catch((err) => {
      done();
    });
  });
});
